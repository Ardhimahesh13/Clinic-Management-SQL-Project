use clinic_db;

-- CREATING TABLES 
-- DOCTOR'S TABLE

create table doctors (
doctor_id int primary key auto_increment ,
first_name varchar(50) not null,
last_name varchar(50) not null,
speciality varchar(100)
);

-- PATIENT'S TABLE

create table patients (
patient_id int primary key auto_increment ,
first_name varchar(50),
last_name varchar(50),
date_of_birth DATE,
phone_number varchar(50) 
);

-- APPOINTEMENT TABLE

create table appointments (
appointment_id int primary key auto_increment ,
patient_id int,
doctor_id int ,
appointment_Date datetime  not null ,
reason varchar(255),
foreign key (patient_id) references patients(patient_id),
foreign key (doctor_id) references doctors(doctor_id)
);

-- BILLING TABLE

create table billings (
bill_id int primary key auto_increment ,
appointment_Id int ,
total_amount decimal (10,2) not null ,
amount_paid decimal (10,2) default 0.00 ,
bill_date DATE,
foreign key (appointment_id) references appointments(appointment_id)
);

-- INSERTING DATA IN THE TABLE 

-- Insert data into doctors
INSERT INTO doctors (first_name, last_name, speciality) VALUES
('Anjali', 'Rao', 'Cardiologist'),
('Vikram', 'Singh', 'Dermatologist'),
('Priya', 'Sharma', 'General Physician');

-- Insert data into patients
INSERT INTO patients (first_name, last_name, date_of_birth, phone_number) VALUES
('Amit', 'Patel', '1985-05-20', '9876543210'),
('Sunita', 'Gupta', '1992-08-15', '8765432109'),
('Rohan', 'Verma', '1978-11-30', '7654321098');

-- Insert data into appointments
INSERT INTO appointments (patient_id, doctor_id, appointment_date, reason) VALUES
(1, 1, '2025-08-10 10:00:00', 'Chest Pain'),
(2, 3, '2025-08-10 11:30:00', 'Annual Checkup'),
(1, 1, '2025-08-17 10:00:00', 'Follow-up'),
(3, 2, '2025-08-11 09:00:00', 'Skin Rash'),
(2, 3, '2025-09-05 12:00:00', 'Fever and Cold');

-- Insert data into billing
INSERT INTO billings (appointment_id, total_amount, amount_paid, bill_date) VALUES
(1, 2500.00, 2500.00, '2025-08-10'),
(2, 1000.00, 500.00, '2025-08-10'),
(3, 750.00, 750.00, '2025-08-17'),
(4, 1500.00, 1500.00, '2025-08-11'),
(5, 1000.00, 0.00, '2025-09-05');

-- Write Analytical Queries

-- Find all appointments for a specific patient (e.g., Amit Patel)

select p.first_name,
p.last_name,
d.first_name as doctor_first_name,
d.speciality,
a.appointment_date,
a.reason
from appointments a
join patients p on a.patient_id = p.patient_id
join doctors d on a.doctor_id = d.doctor_id
where p.first_name ="Amit" and p.last_name = "Patel" ; 

-- Query 2: Calculate the total revenue generated by each doctor.
-- This shows you can use GROUP BY and aggregate functions (SUM) for financial analysis.

select d.first_name,d.last_name,d.speciality,
sum(b.total_amount) as total_revenue
from billings b
join appointments a on b.appointment_Id = a.appointment_id
join doctors d on a.doctor_id = d.doctor_id
group by d.doctor_id
order by total_revenue desc; 

-- Query 3: Identify patients with outstanding balances.
-- This is a practical query for revenue cycle management, a key area for healthcare companies.

select p.first_name,
p.last_name,
p.phone_number,
b.total_amount,
b.amount_paid,
(b.total_amount - b.amount_paid) as outstanding_balance
from billings b
JOIN appointments a ON b.appointment_id = a.appointment_id
JOIN patients p ON a.patient_id = p.patient_id
WHERE b.total_amount > b.amount_paid; 

-- Query 4: Find the busiest doctor in the hospital.
-- This helps in resource management and shows a more advanced use of GROUP BY and COUNT.

select d.first_name,
d.last_name,
d.speciality,
COUNT(a.appointment_id) as no_of_appointments
from appointments a 
join doctors d on d.doctor_id = a.appointment_id
group by d.doctor_id
order by no_of_appointments desc;
limit 1 ;

-- Query 6: Find the most common reasons for appointments.
-- This query helps clinic management understand patient needs and plan resources. It showcases your ability to perform analytical counts.

select reason,
COUNT(appointment_id) as number_of_visits
from appointments
group  by reason
order by number_of_visits desc ; 


-- Query 8: Get a complete history for a single patient.
-- This query pulls together all information for one patient, demonstrating comprehensive use of JOINs.

SELECT 
    p.first_name,
    p.last_name,
    a.appointment_date,
    d.last_name AS doctor,
    d.speciality,
    a.reason,
    b.total_amount,
    b.amount_paid
FROM patients p
JOIN appointments a ON p.patient_id = a.patient_id
JOIN doctors d ON a.doctor_id = d.doctor_id
LEFT JOIN billings b ON a.appointment_id = b.appointment_id
WHERE p.patient_id = 2;


